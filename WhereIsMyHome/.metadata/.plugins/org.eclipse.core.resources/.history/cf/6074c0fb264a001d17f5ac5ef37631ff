package board.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.swing.plaf.synth.SynthSeparatorUI;

import map.common.DBManager;
import board.dto.BoardDto;
import map.dto.*;
public class BoardDaoImpl implements BoardDao {

	private static BoardDaoImpl instance = new BoardDaoImpl();

	private BoardDaoImpl() {

	}

	public static BoardDaoImpl getInstance() {
		return instance;
	}

	@Override
	public int boardInsert(BoardDto dto) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		int ret = -1;

		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append(" insert into event ").append("( name, startDateTime, endDateTime, url, statusCode, registerId, registerDateTime )")
					.append("values ( 'sk', now(), now(), 'dd', '001', 'sk', now() )");

			pstmt = con.prepareStatement(sb.toString());
//			pstmt.setString(2, dto.);
//			pstmt.setString(3, dto.getContent());

			System.out.println(sb);
			
			
			ret = pstmt.executeUpdate(); // 영향받은 row 수 return
			
			System.out.println(ret);
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return ret;
	}
	
	@Override
	public int boardUpdate(BoardDto dto) {
		
		BoardDto boardDto = null;

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int ret = -1;
		
		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append( "UPDATE event SET name = ? WHERE eventKey = ?"  );
		
			pstmt = con.prepareStatement(sb.toString());
			pstmt.setString(1, dto.getName());
			pstmt.setInt(2, dto.getEventKey());
			
			
			ret = pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return ret;
	
	}
	
	
	@Override
	public int boardDelete(int boardId) {
	
		BoardDto boardDto = null;

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int ret = -1;
		
		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append( " delete from event where eventKey = ? " );
			pstmt = con.prepareStatement(sb.toString());
			pstmt.setInt(1, boardId);
			
			ret = pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return ret;
	}



	@Override
	public List<BoardDto> boardList(int limit, int offset) {

		List<BoardDto> list = new ArrayList<>();

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append(" select e.eventKey, e.name, e.registerId, e.startDateTime, e.endDateTime, e.registerDateTime \n ")
					.append(" from event e \n")
					.append(" order by eventKey desc\n ")
					.append(" limit ? offset ?"); // offset은 처음으로부터 N 번째 출력

			pstmt = con.prepareStatement(sb.toString());
			pstmt.setInt(1, limit);
			pstmt.setInt(2, offset);
			

			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				BoardDto boardDto = new BoardDto();
				
				boardDto.setName(rs.getString("name"));
				boardDto.setRegisterId(rs.getString("registerId"));
				boardDto.setStartDateTime(rs.getDate("startDateTime"));
				boardDto.setEndDateTime(rs.getDate("endDateTime"));
				boardDto.setRegisterDateTime(rs.getDate("registerDateTime"));
				boardDto.setEventKey(rs.getInt("eventKey"));

				
				list.add(boardDto);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return list;
	}

	@Override
	public List<BoardDto> boardListSearchWord(int limit, int offset, String searchWord) {

		List<BoardDto> list = new ArrayList<>();

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append(
					" select e.name, e.registerId, e.startDateTime, e.endDateTime, e.registerDateTime  \n ")
					.append(" from event e \n")
					.append(" e.name like ? ") // 주의!!! LIKE에 ? 처리 => %?% X
					.append(" order by eventKey desc\n ").append(" limit ? offset ?"); // offset은 처음으로부터 N 번째 출력

			pstmt = con.prepareStatement(sb.toString());
			pstmt.setString(1, "%" + searchWord + "%");

			pstmt.setInt(2, limit);
			pstmt.setInt(3, offset);

			rs = pstmt.executeQuery();
			while (rs.next()) {
				BoardDto boardDto = new BoardDto();
				
				boardDto.setName(rs.getString("name"));
				boardDto.setRegisterId(rs.getString("registerId"));
				boardDto.setStartDateTime(rs.getDate("startDateTime"));
				boardDto.setEndDateTime(rs.getDate("endDateTime"));
				boardDto.setRegisterDateTime(rs.getDate("registerDateTime"));
			

				list.add(boardDto);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return list;
	}

	@Override
	public int boardListTotalCnt() {
		int totalCnt = -1;

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append(" select count(*) from event ");
			pstmt = con.prepareStatement(sb.toString());

			rs = pstmt.executeQuery();
			while (rs.next()) {
				totalCnt = rs.getInt(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return totalCnt;
	}

	@Override
	public int boardListSearchWordTotalCnt(String searchWord) {
		int totalCnt = -1;

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append(" select count(*) from event where name like ? ");
			pstmt = con.prepareStatement(sb.toString());

			pstmt.setString(1, "%" + searchWord + "%");

			rs = pstmt.executeQuery();
			while (rs.next()) {
				totalCnt = rs.getInt(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return totalCnt;
	}

	@Override
	public BoardDto boardDetail(int boardId) {
		BoardDto boardDto = null;

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			con = DBManager.getConnection();
			StringBuilder sb = new StringBuilder();
			sb.append(
					" select e.eventKey, e.name, e.registerId, e.startDateTime, e.endDateTime, e.registerDateTime \n ")
					.append(" from event e " )
					.append(" where e.eventKey = ? "); // key

			pstmt = con.prepareStatement(sb.toString());
			pstmt.setInt(1, boardId);

			rs = pstmt.executeQuery();
			if (rs.next()) {
				boardDto = new BoardDto();
		
				boardDto.setName(rs.getString("name"));
				boardDto.setRegisterId(rs.getString("registerId"));
				boardDto.setStartDateTime(rs.getDate("startDateTime"));
				boardDto.setEndDateTime(rs.getDate("endDateTime"));
				boardDto.setRegisterDateTime(rs.getDate("registerDateTime"));
				boardDto.setEventKey(rs.getInt("eventKey"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.releaseConnection(rs, pstmt, con);
		}

		return boardDto;
	}


}