/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-10-15 09:13:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import map.dto.*;
import map.dto.*;

public final class mapParking_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/jsp/map/../header.jsp", Long.valueOf(1665825200375L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("map.dto");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>거래 조회</title>\r\n");
      out.write("\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    \r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../../css/style.css\" type=\"text/css\"></link>\r\n");
      out.write("    \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("    ");
      out.write("\r\n");
      out.write(" \r\n");

    String contextPath = request.getContextPath();
	UserDto userDto = (UserDto)session.getAttribute("userDto");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Nanum+Gothic+Coding&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print( contextPath );
      out.write("/css/header.css\" />\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <nav class=\"navbar navbar-light bg-light\">\r\n");
      out.write("\r\n");
      out.write("      <div id=\"nav-menu\">\r\n");
      out.write("			\r\n");
      out.write("			<div id=\"nav-menu-left\">\r\n");
      out.write("		 		<button class=\"btn btn-sm btn-outline-secondary\" id=\"homeBtn\"><a href=\"");
      out.print( contextPath );
      out.write("/jsp/index.jsp\">Home</a></button>\r\n");
      out.write("			</div>\r\n");
      out.write("  			<div id=\"nav-menu-right\">\r\n");
      out.write("  				");
 if( userDto == null) { 
      out.write("\r\n");
      out.write("	  			<button class=\"btn btn-sm btn-outline-secondary\" type=\"button\" id=\"login-btn\" ><a href=\"");
      out.print(contextPath );
      out.write("/jsp/index.jsp\">login</a></button>\r\n");
      out.write("		       	<button class=\"btn btn-sm btn-outline-secondary\" type=\"button\" id=\"register-btn\" ><a href=\"");
      out.print(contextPath );
      out.write("/jsp/register.jsp\">register</a></button>\r\n");
      out.write("		        ");
 } else { 
      out.write("\r\n");
      out.write("	    \r\n");
      out.write("	\r\n");
      out.write("                <button class=\"btn btn-sm btn-outline-secondary parking\"> <a  aria-current=\"page\" id=\"parking\" href=\"");
      out.print(contextPath );
      out.write("/jsp/map/mapParking.jsp\">Favorite Area Parking Info</a></button>\r\n");
      out.write("                <button class=\"btn btn-sm btn-outline-secondary\"><a  aria-current=\"page\" id=\"logout\"href=\"#\">logout</a></button>\r\n");
      out.write("                <button class=\"btn btn-sm btn-outline-secondary\"><a  aria-current=\"page\" id=\"myPage\" href=\"");
      out.print(contextPath );
      out.write("/user/userMain\">mypage</a></button>\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("  				");
 } 
      out.write("\r\n");
      out.write("  			</div>\r\n");
      out.write("   	\r\n");
      out.write("   	\r\n");
      out.write("            <!-- 로그인 전 -->\r\n");
      out.write("            \r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            	\r\n");
      out.write("   		</div>\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write(" \r\n");
      out.write("    </nav>\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("	document.querySelector(\"#logout\").onclick = function(){\r\n");
      out.write("		logout();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	async function logout(){\r\n");
      out.write("	let url = \"");
      out.print( contextPath);
      out.write("/logout\";\r\n");
      out.write("	\r\n");
      out.write("	try{\r\n");
      out.write("	    let response = await fetch( url ); \r\n");
      out.write("	    let data = await response.json(); \r\n");
      out.write("	    if( data.result == \"fail\"){ \r\n");
      out.write("	      window.location.href = \"");
      out.print( contextPath);
      out.write("/jsp/login.jsp\";\r\n");
      out.write("	    }else if( data.result == \"fail\"){\r\n");
      out.write("	    	alertify.alert(\"오류\",'로그아웃 과정에서 오류가 발생했습니다.');\r\n");
      out.write("	    }            	\r\n");
      out.write("	}catch(error){\r\n");
      out.write("		alertify.alert(\"오류\",'로그아웃 과정에서 오류가 발생했습니다.');\r\n");
      out.write("	}\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("    <div class=\"contianer\">\r\n");
      out.write("       <br>\r\n");
      out.write("       <br>\r\n");
      out.write("        <!-- 주차장 정보 -->\r\n");
      out.write("        <div class=\"row\" id=\"deal-content\">\r\n");
      out.write("            <div id=\"deal-wrapper\" class=\"col-3\">\r\n");
      out.write("\r\n");
      out.write("                <div class=\"container\"> \r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("                        <h2 style=\"margin-top: 5px; margin-left: 0.5em;\">관심지역 주차장 정보</h2>\r\n");
      out.write("                        <hr>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div id=\"deal-list\" class=\"row deal-list\">\r\n");
      out.write("                    	..\r\n");
      out.write("                     \r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>        \r\n");
      out.write("            <div id=\"map-wrapper\">\r\n");
      out.write("                <div id=\"map-detail\"></div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("            \r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(contextPath );
      out.write("/js/util.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=30825d7ff55d14a818299c266e641081\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("/********************전역변수*********************/\r\n");
      out.write("let mapListArr;	// 거래내역 리스트\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 지도 설정\r\n");
      out.write("let defaultMapCenter = new kakao.maps.LatLng(37.575, 126.99);\r\n");
      out.write("\r\n");
      out.write("var mapContainer = document.getElementById('map-detail'), // 지도를 표시할 div  \r\n");
      out.write("   mapOption = { \r\n");
      out.write("       center: defaultMapCenter, // 지도의 중심좌표\r\n");
      out.write("       level: 7 // 지도의 확대 레벨\r\n");
      out.write("   };\r\n");
      out.write("let map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("// 마커 관련\r\n");
      out.write("let imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\"; 	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("window.onload = function(){\r\n");
      out.write("	let gugun_select = document.querySelector(\"#gugun-select\");\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	// 일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성합니다\r\n");
      out.write("	var mapTypeControl = new kakao.maps.MapTypeControl();\r\n");
      out.write("	\r\n");
      out.write("	// 지도에 컨트롤을 추가해야 지도위에 표시됩니다\r\n");
      out.write("	// kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다\r\n");
      out.write("	map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\r\n");
      out.write("	\r\n");
      out.write("	// 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다\r\n");
      out.write("	var zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("	map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("	\r\n");
      out.write("	getParkingList();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 지도에 넣을 데이터 가져오기\r\n");
      out.write("async function getParkingList(){\r\n");
      out.write("	let url = '");
      out.print( contextPath );
      out.write("/parking';\r\n");
      out.write("	\r\n");
      out.write("	try{\r\n");
      out.write("		let response = await fetch( url);\r\n");
      out.write("		let data = await response.json();\r\n");
      out.write("		makeMapListHtml(data)\r\n");
      out.write("		makeMapMarker( data );\r\n");
      out.write("		\r\n");
      out.write("	}catch( error ){\r\n");
      out.write("		console.log(error);\r\n");
      out.write("		alert('주차장정보 조회 과정에서 문제가 생겼습니다.')\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function makeMapListHtml(list){\r\n");
      out.write("	let listHtml = ``;\r\n");
      out.write("	\r\n");
      out.write("	list.forEach( el => {\r\n");
      out.write("\r\n");
      out.write("		let parkingName = el.parkingName;\r\n");
      out.write("		let addr = el.addr;\r\n");
      out.write("		let capacity = el.capacity;\r\n");
      out.write("		let rates = el.rates;\r\n");
      out.write("		let timeRate = el.timeRate;\r\n");
      out.write("		\r\n");
      out.write("		listHtml += \r\n");
      out.write("			`\r\n");
      out.write("		 <div class=\"row deal-list-item\" data-bs-toggle=\"modal\" data-bs-target=\"#detail-modal\">\r\n");
      out.write("         <div class=\"row parking-name\">${parkingName}</div>\r\n");
      out.write("         <div class=\"row parking-addr\">${addr}</div>\r\n");
      out.write("         <div class=\"row parking-money\">기본요금: ${rates}원/ ${timeRate}분</div>\r\n");
      out.write("         <div class=\"row parking-capacity\">${capacity} 대 주차 가능</div>\r\n");
      out.write("     </div>\r\n");
      out.write("		`;\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	if(listHtml.length == 0)\r\n");
      out.write("		document.querySelector(\"#deal-list\").innerHTML = \"주변 주차장이 없습니다\";\r\n");
      out.write("	else {\r\n");
      out.write("		document.querySelector(\"#deal-list\").innerHTML = listHtml;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	//boardListTotalCnt();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/******************** 지도 *********************/\r\n");
      out.write("\r\n");
      out.write("function makeMapMarker(list){\r\n");
      out.write("	\r\n");
      out.write("	let latSum = list.reduce(function add(sum, el) {\r\n");
      out.write("		  return sum + Number(el.lat);\r\n");
      out.write("		}, 0);\r\n");
      out.write("	\r\n");
      out.write("	console.log(latSum)\r\n");
      out.write("\r\n");
      out.write("	let latAverage = latSum / list.length;\r\n");
      out.write("	\r\n");
      out.write("	let lngSum = list.reduce(function add(sum, el) {\r\n");
      out.write("		  return sum + Number(el.lng);\r\n");
      out.write("		}, 0);\r\n");
      out.write("\r\n");
      out.write("	let lngAverage = lngSum / list.length;\r\n");
      out.write("\r\n");
      out.write("	list.forEach(el => {\r\n");
      out.write("		console.log(el.lat + \" \" + el.lng)\r\n");
      out.write("	    let imageSize = new kakao.maps.Size(24, 35); \r\n");
      out.write("	    \r\n");
      out.write("	    // 마커 이미지를 생성합니다    \r\n");
      out.write("	    let markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("	    \r\n");
      out.write("	    // 마커를 생성합니다\r\n");
      out.write("	    var marker = new kakao.maps.Marker({\r\n");
      out.write("	        map: map, // 마커를 표시할 지도\r\n");
      out.write("	        position:  new kakao.maps.LatLng(el.lat, el.lng),\r\n");
      out.write("	        title : el.parkingName, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\r\n");
      out.write("	        image : markerImage // 마커 이미지 \r\n");
      out.write("	    });\r\n");
      out.write("	    \r\n");
      out.write("		\r\n");
      out.write("	})\r\n");
      out.write("	console.log(latAverage + \" \" + lngAverage)\r\n");
      out.write("	map.setCenter(new kakao.maps.LatLng(latAverage, lngAverage)); \r\n");
      out.write("	map.setLevel(5);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    		document.querySelector(\"#logout\").onclick = function(){\r\n");
      out.write("    			logout();\r\n");
      out.write("    		}\r\n");
      out.write("\r\n");
      out.write("		async function logout(){\r\n");
      out.write("        	let url = \"");
      out.print( contextPath);
      out.write("/logout\";\r\n");
      out.write("        	\r\n");
      out.write("        	try{\r\n");
      out.write("                let response = await fetch( url ); \r\n");
      out.write("                let data = await response.json(); \r\n");
      out.write("                if( data.result == \"fail\"){ \r\n");
      out.write("                  window.location.href = \"");
      out.print( contextPath);
      out.write("/jsp/login.jsp\";\r\n");
      out.write("                }else if( data.result == \"fail\"){\r\n");
      out.write("              	  alert('로그아웃 과정에서 오류가 발생했습니다.');\r\n");
      out.write("                }            	\r\n");
      out.write("            }catch(error){\r\n");
      out.write("            	alert('로그아웃 과정에서 오류가 발생했습니다.');\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
